// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model App {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  appId       String   @unique @default(cuid()) @map("app_id")
  name        String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quests      Quest[]
  players     Player[]
  hooks       Hook[]
  keys        AppKey[]

  @@map("apps")
}

model AppKey {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  issuer    String
  memo      String?
  appId     String    @map("app_id") @db.ObjectId
  app       App       @relation(fields: [appId], references: [id])
  key       String    @unique
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  expiresAt DateTime?
}

type Hook {
  type      String
  url       String
  secret    String
  createdAt DateTime @default(now())
}

model Player {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  email       String?
  username    String?
  description String?
  appId       String        @map("app_id") @db.ObjectId
  app         App           @relation(fields: [appId], references: [id])
  quests      PlayerQuest[]
  metadata    Json          @default("{}")

  @@unique([appId, identifier])
  @@map("players")
}

model Quest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  appId       String        @map("app_id") @db.ObjectId
  app         App           @relation(fields: [appId], references: [id])
  name        String
  challenges  Challenge[]
  memo        String?
  currency    String
  instances   PlayerQuest[]
  conccurency Int?           @default(1)

  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quests")
}

model Challenge {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  memo      String?
  type      String
  resource  String
  condition String
  questId   String                 @map("quest_id") @db.ObjectId
  quest     Quest                  @relation(fields: [questId], references: [id])
  reward    Float
  instances PlayerQuestChallenge[]

  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quest_sub_challenges")
}

model PlayerQuest {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  playerId    String                 @map("player_id") @db.ObjectId
  player      Player                 @relation(fields: [playerId], references: [id])
  questId     String                 @map("quest_id") @db.ObjectId
  quest       Quest                  @relation(fields: [questId], references: [id])
  challenges  PlayerQuestChallenge[]
  claimed     Boolean                @default(false)
  status      QuestStatus            @default(IN_PROGRESS)
  createdAt   DateTime               @default(now())
  completedAt DateTime?
  claimedAt   DateTime?
  updatedAt   DateTime               @updatedAt

  @@unique([playerId, questId])
  @@map("player_quests")
}

model PlayerQuestChallenge {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  playerQuestId String      @map("player_quest_id") @db.ObjectId
  playerQuest   PlayerQuest @relation(fields: [playerQuestId], references: [id])
  challengeId   String      @map("challenge_id") @db.ObjectId
  challenge     Challenge   @relation(fields: [challengeId], references: [id])
  verified      Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerQuestId, challengeId])
  @@map("player_quest_challenges")
}

type Reward {
  currency String
  amount   Int
}

enum QuestStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model EventLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  appId       String   @map("app_id") @db.ObjectId
  playerId    String   @map("player_id") @db.ObjectId
  questId     String   @map("quest_id") @db.ObjectId
  challengeId String   @map("challenge_id") @db.ObjectId
  timestamp   DateTime @default(now())

  @@map("event_logs")
}
